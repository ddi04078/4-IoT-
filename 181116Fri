* 센서로 데이터 수신 및 관리, 웹서비스
* iot / 클라우드 / 스마트 시티
* 생각을 바꾸기
* 사소한 것이라도 질문하기!!


대학교육의 중심이 되는, 나무에 해당하는 db, os, 알고리즘, ai, 멀티미디어에서 벗어나서 
실습의 초점은 (숲) iot, cloud, 빅데이터 와 (산) 스마트시티, 4차 산업혁명에 있다.

스마트 시티 / 4차산업혁명 ⇔ 사물인터넷(모니터링 및 제어) ⇔ 클라우드 (저장, 분석, 진단, 예측, 제어결정)

스마트 시티란? (시스템적 해석) 시스템의 집합체. 혼자서 작동 + 서로 또는 사람들과 협력
-> 혼자서도 잘 동작하고, 서로 유기적으로 잘 결합할때가 돼서야 비로소 스마트 시티라고 할 수 있다. 

구조 2개 (1) 반응적 - 사건에 대해 분석(진단) / 당하고 깨닫는? ㅋㅋ  (2) 선행적 - 미리 알고 / 미래예측

Systems Thinking : 복잡한 시스템의, 부분이 아닌 전체에 집중

배울것 : event-driven server / node.js / 프로토콜(HTTP/MQTT) / iot / 라즈베리 파이, 아두이노
       / 키트 / Mobius(oneM2M based iot programming)

기존의 패러다임이 user-app-server 구조로 사용자의 요구사항에 부합하는 시스템을 만드는게 목적이라면, 새로운 패러다임의 목적은?
-> 아무데나 붙을 수 있는 event-driven server

event-driven server란?
  (1) node.js에서 서버는 : request가 오면 service 를, response가 오면 callback을, event가 오면 event handler를
  (2) node.js에서 서버코드는 control적인건 없고, 외부의 요청이나 반응에 대해 즉각적/독립적으로 움직인다.  
      -> 코드는 순서도 상관없고, 독립적인 요청/반응/이벤트에 대한 집합으로 생각하면 됨



[node.js(javascript) _ encapsulation & context]
* 자바스크립트를 이용한 객체지향 코딩
1. 모든것이 객체 
2. objects / functions / modules
3. 객체 만드는 5가지 방법
   (1) built-in / automatic : (별로 안중요) 모든게 객체다. 그러나 primitive value를 제외하는데, 여기에 값을 주면 객체가 된다. 
   (2) programmed : 멤버변수와 메소드를 가진 객체로 정의 가능하다.
       *dynamically created methods = function = 밖에서 메소드를 정의하고 (2)의 객체에 넣을수있다. 
                                    인자로 메소드가 될 수도 있다. 이처럼 다이나믹하다. 유연성이 높지만 그만큼 괴물적인 코드가 될 수 있어서 조심해야한다. 
	 (3) function-based : function을 object constructor로 사용한다. new 키워드를 사용한다. new의 리턴이 객체인것. 그래서 new를 쓰면 객체형식으로 만들어진다. 그럼 (2)와의 차이는? function이 var 객체 안에 정의된 (2)와 달리, (3)에서는 객체가 new사용시 만들어진다. 객체지향의 클래스처럼 템플릿이고, new할때마다 붕어빵처럼 찍어냄. 템플릿이 정해져있어 (2)보다 유연성은 떨어지지만 자바스크립트는 이것을 수정 가능하다.
   (4) Module-based : 제일 중요! 모듈=파일=코드=.c등=또는 라이브러리. node.js는 모듈의 집합이다. 그럼 c++의 include처럼 모듈을 import 해야한다. 문제는? 모듈 각각을 불러왔을때, 충돌이 생기는 것. require은 load하지않고, execute = 코드를 가져오지 않고, 실행 후 결과인 객체를 가져올수있다. 모듈 내에 어떤 일이 일어나도 실행만 되면 된다. 따라서 모듈의 코드에 대한 관심이 없고, 최종적으로 넘겨주는 객체에 관심이 있다. 
   (5) Class-created

  => 우리가 쓸 HTTP/MQTT가 모듈로 작성되어있어서, 이걸 javascript를 이해해야한다!


